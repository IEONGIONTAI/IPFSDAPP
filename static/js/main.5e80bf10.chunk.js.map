{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Navbar.js","box.png","components/Main.js","components/helpers.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","type","name","console","log","state","uploadFile","description","add","error","size","loading","dstorage","methods","hash","send","from","account","on","reload","e","alert","bind","this","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","eth","getAccounts","accounts","net","getId","networkId","networkData","DStorage","networks","Contract","abi","address","fileCount","call","filesCount","i","id","className","Component","Navbar","rel","src","box","width","height","alt","href","substring","Identicon","toString","module","exports","Main","value","copied","class","role","style","maxWidth","onSubmit","fileDescription","action","method","onChange","innerHTML","multiple","ref","input","placeholder","required","maxHeight","scope","map","key","fileId","fileName","fileType","bytes","parseInt","Math","floor","round","pow","convertBytes","fileSize","moment","unix","uploadTime","format","uploader","Button","variant","text","fileHash","onCopy"],"mappings":"oKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACC,EAAA,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,8x5FE3HbC,G,OADaC,EAAQ,IACdC,CAAW,CAAEC,KAAM,iBAAkBC,KAAM,KAAMC,SAAU,WAElEd,E,kDAkGJ,WAAYe,GAAQ,IAAD,8BACjB,cAAMA,IAhDRC,YAAc,SAAAC,GACZA,EAAMC,iBAEN,IAAMC,EAAOF,EAAMG,OAAOC,MAAM,GAC1BC,EAAS,IAAI5B,OAAO6B,WAE1BD,EAAOE,kBAAkBL,GACzBG,EAAOG,UAAY,WACjB,EAAKC,SAAS,CACZC,OAAQC,EAAON,EAAOO,QACtBC,KAAMX,EAAKW,KACXC,KAAMZ,EAAKY,OAEbC,QAAQC,IAAI,SAAU,EAAKC,MAAMP,UAkClB,EA9BnBQ,WAAa,SAAAC,GACXJ,QAAQC,IAAI,8BAGZxB,EAAK4B,IAAI,EAAKH,MAAMP,QAAQ,SAACW,EAAOT,GAClCG,QAAQC,IAAI,cAAeJ,EAAOU,MAC/BD,EACDN,QAAQM,MAAMA,IAIhB,EAAKZ,SAAS,CAAEc,SAAS,IAEF,KAApB,EAAKN,MAAMJ,MACZ,EAAKJ,SAAS,CAACI,KAAM,SAEvB,EAAKI,MAAMO,SAASC,QAAQP,WAAWN,EAAO,GAAGc,KAAMd,EAAO,GAAGU,KAAM,EAAKL,MAAMJ,KAAM,EAAKI,MAAMH,KAAMK,GAAaQ,KAAK,CAAEC,KAAM,EAAKX,MAAMY,UAAWC,GAAG,mBAAmB,SAACJ,GAC9K,EAAKjB,SAAS,CACbc,SAAS,EACTV,KAAM,KACNC,KAAM,OAERrC,OAAOC,SAASqD,YACdD,GAAG,SAAS,SAACE,GACdvD,OAAOwD,MAAM,SACb,EAAKxB,SAAS,CAACc,SAAS,YAO5B,EAAKN,MAAQ,CACXY,QAAS,GACTL,SAAU,KACVpB,MAAO,GACPmB,SAAS,EACTV,KAAM,KACNC,KAAM,MAER,EAAKI,WAAa,EAAKA,WAAWgB,KAAhB,gBAClB,EAAKnC,YAAc,EAAKA,YAAYmC,KAAjB,gBAXF,E,2LA/FXC,KAAKC,W,uBACLD,KAAKE,qB,qPAIP5D,OAAO6D,S,uBACT7D,OAAO8D,KAAO,IAAIC,IAAK/D,OAAO6D,U,SACxB7D,OAAO6D,SAASG,S,6BAEfhE,OAAO8D,KACd9D,OAAO8D,KAAO,IAAIC,IAAK/D,OAAO8D,KAAKG,iBAGnCjE,OAAOwD,MAAM,uE,iRAKTM,EAAO9D,OAAO8D,K,SAEGA,EAAKI,IAAIC,c,cAA1BC,E,OACNV,KAAK1B,SAAS,CAAEoB,QAASgB,EAAS,K,SAEVN,EAAKI,IAAIG,IAAIC,Q,UAA/BC,E,SACAC,EAAcC,EAASC,SAASH,I,wBAK9BxB,EAAW,IAAIe,EAAKI,IAAIS,SAASF,EAASG,IAAKJ,EAAYK,SACjEvC,QAAQC,IAAIkC,EAASG,KACrBlB,KAAK1B,SAAS,CAAEe,a,UAESA,EAASC,QAAQ8B,YAAYC,O,QAAhDC,E,OACNtB,KAAK1B,SAAS,CAAEgD,eAEPC,EAAID,E,aAAYC,GAAK,G,kCACTlC,EAASC,QAAQrB,MAAMsD,GAAGF,O,QAAvCtD,E,OACNiC,KAAK1B,SAAS,CACZL,MAAM,GAAD,mBAAM+B,KAAKlB,MAAMb,OAAjB,CAAwBF,M,QAHAwD,I,gDAOjCjF,OAAOwD,MAAM,qD,uJAmEf,OACE,6BACE,kBAAC,IAAD,CAAQJ,QAASM,KAAKlB,MAAMY,UAC1BM,KAAKlB,MAAMM,QACT,yBAAKoC,GAAG,SAASC,UAAU,oBAAmB,0CAC9C,kBAAC,IAAD,CACExD,MAAO+B,KAAKlB,MAAMb,MAClBL,YAAaoC,KAAKpC,YAClBmB,WAAYiB,KAAKjB,kB,GAzHb2C,aAiIH9E,Q,+ICvIT+E,E,uKAGF,OACE,yBAAKF,UAAU,uDACb,uBACEA,UAAU,sCACVzD,OAAO,SACP4D,IAAI,uBAEJ,yBAAKC,IAAKC,IAAKC,MAAM,KAAKC,OAAO,KAAKP,UAAU,YAAYQ,IAAI,KAChE,mDAEF,wBAAIR,UAAU,mBACZ,4BACE,2BAAOD,GAAG,WACR,uBAAGxD,OAAO,SACPiE,IAAI,GACJR,UAAU,aACVG,IAAI,sBACJM,KAAM,gCAAkClC,KAAKrC,MAAM+B,SACnDM,KAAKrC,MAAM+B,QAAUM,KAAKrC,MAAM+B,QAAQyC,UAAU,EAAE,GAAK,MAL5D,MAKsEnC,KAAKrC,MAAM+B,QAAUM,KAAKrC,MAAM+B,QAAQyC,UAAU,GAAG,IAAM,QAGjInC,KAAKrC,MAAM+B,QACT,yBACEuC,IAAI,GACJR,UAAU,OACVM,MAAM,KACNC,OAAO,KACPH,IAAG,gCAA2B,IAAIO,IAAUpC,KAAKrC,MAAM+B,QAAS,IAAI2C,cAEtE,sC,GAhCKX,aAyCNC,O,oBC7CfW,EAAOC,QAAU,IAA0B,iC,2HCOrCC,G,mNAEJ1D,MAAQ,CACN2D,MAAO,GACPC,QAAQ,G,uDAGA,IAAD,OACP,OACE,6BACE,wBAAIC,MAAM,SACN,uBAAGA,MAAM,qBAAT,uCAEJ,yBAAKA,MAAM,qBACT,yBAAKA,MAAM,OACT,4BACE,wBAAIlB,UAAU,qBAAd,gaAIJ,yBAAKkB,MAAM,OACT,6BACE,0BAAMC,KAAK,OAAOnB,UAAU,kCAAkCoB,MAAO,CAAEC,SAAU,WAC/E,yBAAKrB,UAAU,WACb,mCACA,yBAAKoB,MAAO,CAACC,SAAU,QAASd,OAAS,UACrC,0BAAMe,SAAU,SAAClF,GACfA,EAAMC,iBACN,IAAMkB,EAAc,EAAKgE,gBAAgBP,MACzC,EAAK9E,MAAMoB,WAAWC,IACrBiE,OAAO,aAAaC,OAAO,QAE5B,2BAAOxE,KAAK,OAAOyE,SAAU,SAAAtD,GAC3B,EAAKlC,MAAMC,YAAYiC,GACvBhD,SAASC,eAAe,YAAYsG,UAApC,UAAmDvD,EAAE7B,OAAOC,MAAM,GAAGU,OAClE8C,UAAU,YAAYD,GAAG,YAAY6B,UAAQ,IAClD,uBAAG7B,GAAG,YAAN,+CAGA,yBAAKC,UAAU,cACX,6BACE,2BACED,GAAG,kBACH9C,KAAK,OACL4E,IAAK,SAACC,GAAY,EAAKP,gBAAkBO,GACzC9B,UAAU,sCACV+B,YAAY,iBACZC,UAAQ,KAEhB,4BAAQ/E,KAAK,UAAS,wCAG5B,mCACA,2BAAO+C,UAAU,8BAA8BoB,MAAO,CAAEa,UAAW,UACjE,2BAAOb,MAAO,CAAE,SAAY,SAC1B,wBAAIpB,UAAU,sBACZ,wBAAIkC,MAAM,MAAMd,MAAO,CAAEd,MAAO,OAAhC,MACA,wBAAI4B,MAAM,MAAMd,MAAO,CAAEd,MAAO,QAAhC,QACA,wBAAI4B,MAAM,MAAMd,MAAO,CAAEd,MAAO,QAAhC,eACA,wBAAI4B,MAAM,MAAMd,MAAO,CAAEd,MAAO,QAAhC,QACA,wBAAI4B,MAAM,MAAMd,MAAO,CAAEd,MAAO,OAAhC,QACA,wBAAI4B,MAAM,MAAMd,MAAO,CAAEd,MAAO,OAAhC,QACA,wBAAI4B,MAAM,MAAMd,MAAO,CAAEd,MAAO,QAAhC,iBACA,wBAAI4B,MAAM,MAAMd,MAAO,CAAEd,MAAO,QAAhC,WAGF/B,KAAKrC,MAAMM,MAAM2F,KAAI,SAAC7F,EAAM8F,GAC5B,OACE,2BAAOhB,MAAO,CAAE,SAAY,OAAO,MAAS,QAAUgB,IAAKA,GACzD,4BACE,4BAAK9F,EAAK+F,QACV,4BAAK/F,EAAKgG,UACV,4BAAKhG,EAAKiF,iBACV,4BAAKjF,EAAKiG,UACV,4BCjFrB,SAAsBC,GAE1B,GAAc,IAAVA,EAAa,MAAO,SACxB,IAAI1C,EAAI2C,SAASC,KAAKC,MAAMD,KAAKtF,IAAIoF,GAASE,KAAKtF,IAAI,QACvD,OAAOsF,KAAKE,MAAMJ,EAAQE,KAAKG,IAAI,KAAM/C,GAAI,GAAK,IAHtC,CAAC,QAAS,KAAM,KAAM,KAAM,MAGsBA,GD6EhCgD,CAAaxG,EAAKyG,WACvB,4BAAKC,IAAOC,KAAK3G,EAAK4G,YAAYC,OAAO,oBACzC,4BACE,uBACE1C,KAAM,gCAAkCnE,EAAK8G,SAC7CjD,IAAI,sBACJ5D,OAAO,UACP,gCACA,kBAAC8G,EAAA,EAAD,CAAQC,QAAQ,mBAAhB,mBAIR,4BACE,2BACA,kBAAC,kBAAD,CAAiBC,KAAM,+BAAiCjH,EAAKkH,SAC3DC,OAAQ,kBAAM,EAAK5G,SAAS,CAACoE,QAAQ,MACrC,gCACA,kBAACoC,EAAA,EAAD,CAAQC,QAAQ,WAAhB,2BAWZ,6BACE,uC,GAvGCrD,cAkHJc,O","file":"static/js/main.5e80bf10.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import DStorage from '../abis/DStorage.json'\r\nimport React, { Component } from 'react';\r\nimport Navbar from './Navbar'\r\nimport Main from './Main'\r\nimport Web3 from 'web3';\r\nimport './App.css';\r\n\r\nconst ipfsClient = require('ipfs-http-client')\r\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({ account: accounts[0] })\r\n    // Network ID\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = DStorage.networks[networkId]\r\n\r\n    if(networkData) {\r\n      // Assign contract\r\n      \r\n      const dstorage = new web3.eth.Contract(DStorage.abi, networkData.address)\r\n      console.log(DStorage.abi); // 問題: fileCount 錯 不同的user可見大家的file \r\n      this.setState({ dstorage })\r\n      // Get files amount\r\n      const filesCount = await dstorage.methods.fileCount().call()\r\n      this.setState({ filesCount })\r\n      // Load files&sort by the newest\r\n      for (var i = filesCount; i >= 1; i--) {\r\n        const file = await dstorage.methods.files(i).call()\r\n        this.setState({\r\n          files: [...this.state.files, file]\r\n        })\r\n      }\r\n    } else {\r\n      window.alert('NTHU Box conract not deployed to detected network')\r\n    }\r\n  }\r\n\r\n  // Get file from user\r\n  captureFile = event => {\r\n    event.preventDefault()\r\n\r\n    const file = event.target.files[0]\r\n    const reader = new window.FileReader()\r\n\r\n    reader.readAsArrayBuffer(file)\r\n    reader.onloadend = () => {\r\n      this.setState({\r\n        buffer: Buffer(reader.result),\r\n        type: file.type,\r\n        name: file.name\r\n      })\r\n      console.log('buffer', this.state.buffer)\r\n    }\r\n  }\r\n\r\n  uploadFile = description => {\r\n    console.log(\"Submitting file to IPFS...\")\r\n\r\n    // Add file to the IPFS\r\n    ipfs.add(this.state.buffer, (error, result) => {\r\n      console.log('IPFS result', result.size)\r\n      if(error) {\r\n        console.error(error)\r\n        return\r\n      }\r\n\r\n      this.setState({ loading: true })\r\n      // Assign value for the file without extension\r\n      if(this.state.type === ''){\r\n        this.setState({type: 'none'})\r\n      }\r\n      this.state.dstorage.methods.uploadFile(result[0].hash, result[0].size, this.state.type, this.state.name, description).send({ from: this.state.account }).on('transactionHash', (hash) => {\r\n        this.setState({\r\n         loading: false,\r\n         type: null,\r\n         name: null\r\n       })\r\n       window.location.reload()\r\n      }).on('error', (e) =>{\r\n        window.alert('Error')\r\n        this.setState({loading: false})\r\n      })\r\n    })\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '',\r\n      dstorage: null,\r\n      files: [],\r\n      loading: false,\r\n      type: null,\r\n      name: null\r\n    }\r\n    this.uploadFile = this.uploadFile.bind(this)\r\n    this.captureFile = this.captureFile.bind(this)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account} />\r\n        { this.state.loading\r\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\r\n          : <Main\r\n              files={this.state.files}\r\n              captureFile={this.captureFile}\r\n              uploadFile={this.uploadFile}\r\n            />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React, { Component } from 'react';\r\nimport Identicon from 'identicon.js';\r\nimport box from '../box.png'\r\n\r\nclass Navbar extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-dark navbar-custom p-0 text-monospace\">\r\n        <a\r\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <img src={box} width=\"30\" height=\"30\" className=\"align-top\" alt=\"\" />\r\n          <b>    青椒Box</b>\r\n        </a>\r\n        <ul className=\"navbar-nav px-3\">\r\n          <li>\r\n            <small id=\"account\">\r\n              <a target=\"_blank\"\r\n                 alt=\"\"\r\n                 className=\"text-white\"\r\n                 rel=\"noopener noreferrer\"\r\n                 href={\"https://etherscan.io/address/\" + this.props.account}>\r\n                {this.props.account ? this.props.account.substring(0,6) : '0x0'}...{this.props.account ? this.props.account.substring(38,42) : '0x0'}\r\n              </a>\r\n            </small>\r\n            { this.props.account\r\n              ? <img\r\n                  alt=\"\"\r\n                  className='ml-2'\r\n                  width='30'\r\n                  height='30'\r\n                  src={`data:image/png;base64,${new Identicon(this.props.account, 30).toString()}`}\r\n                />\r\n              : <span></span>\r\n            }\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;","module.exports = __webpack_public_path__ + \"static/media/box.34892df2.png\";","import React, { Component } from 'react';\r\nimport { convertBytes } from './helpers';\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport Button from 'react-bootstrap/Button'\r\nimport moment from 'moment'\r\nimport './App.css';\r\n\r\nclass Main extends Component {\r\n\r\n  state = {\r\n    value: '',\r\n    copied: false,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 class=\"title\">\r\n            <b class=\"title-txt txtFont\">IPFS雲端資料庫</b>\r\n        </h1>\r\n        <div class=\"containerlayout-1\">\r\n          <div class=\"col\">\r\n            <ul>\r\n              <li className=\"paddingLR txtFont\">此網頁是一個雲端資料庫，您可以在此上傳您的個人檔案，所有上傳的資料將被放在IPFS系統上，您也可以將您上傳的檔案，通過分享HASH值跟好友們共享檔案。</li>\r\n            </ul>\r\n          </div>\r\n\r\n          <div class=\"col\">\r\n            <div>\r\n              <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto bg-dk\" style={{ maxWidth: '1024px' }}>\r\n                <div className=\"content\">  \r\n                  <p>&nbsp;</p>\r\n                  <div style={{maxWidth: '512px', height : '450px' }}>\r\n                      <form onSubmit={(event) => {\r\n                        event.preventDefault()\r\n                        const description = this.fileDescription.value\r\n                        this.props.uploadFile(description)\r\n                      }} action=\"upload.php\" method=\"POST\">\r\n\r\n                        <input type=\"file\" onChange={e=>{\r\n                          this.props.captureFile(e);\r\n                          document.getElementById(\"filename\").innerHTML = `${e.target.files[0].name}`;\r\n                          }} className=\"fileInput\" id=\"fileInput\" multiple/>\r\n                        <p id=\"filename\">Drag your files here or click in this area.</p>\r\n\r\n                        {/*<input type=\"file\" onChange={this.props.captureFile} className=\"text-white text-monospace\"/>*/}\r\n                        <div className=\"form-group\">\r\n                            <br></br>\r\n                              <input\r\n                                id=\"fileDescription\"\r\n                                type=\"text\"\r\n                                ref={(input) => { this.fileDescription = input }}\r\n                                className=\"form-control text-monospace dcinput\"\r\n                                placeholder=\"description...\"\r\n                                required />\r\n                        </div>\r\n                        <button type=\"submit\"><b>Upload</b></button>\r\n                      </form>\r\n                  </div>\r\n                  <p>&nbsp;</p>\r\n                  <table className=\"table-sm tb1 text-monospace\" style={{ maxHeight: '450px'}}>\r\n                    <thead style={{ 'fontSize': '15px' }}>\r\n                      <tr className=\"bg-dark text-white\">\r\n                        <th scope=\"col\" style={{ width: '1%'}}>id</th>\r\n                        <th scope=\"col\" style={{ width: '20%'}}>name</th>\r\n                        <th scope=\"col\" style={{ width: '23%'}}>description</th>\r\n                        <th scope=\"col\" style={{ width: '12%'}}>type</th>\r\n                        <th scope=\"col\" style={{ width: '9%'}}>size</th>\r\n                        <th scope=\"col\" style={{ width: '9%'}}>date</th>\r\n                        <th scope=\"col\" style={{ width: '12%'}}>uploader/view</th>\r\n                        <th scope=\"col\" style={{ width: '12%'}}>share</th>\r\n                      </tr>\r\n                    </thead>\r\n                    { this.props.files.map((file, key) => {\r\n                      return(\r\n                        <thead style={{ 'fontSize': '12px','color': '#fff' }} key={key}>\r\n                          <tr>\r\n                            <td>{file.fileId}</td>\r\n                            <td>{file.fileName}</td>\r\n                            <td>{file.fileDescription}</td>\r\n                            <td>{file.fileType}</td>\r\n                            <td>{convertBytes(file.fileSize)}</td>\r\n                            <td>{moment.unix(file.uploadTime).format('h:mm:ss A M/D/Y')}</td>\r\n                            <td>\r\n                              <a\r\n                                href={\"https://etherscan.io/address/\" + file.uploader}\r\n                                rel=\"noopener noreferrer\"\r\n                                target=\"_blank\">\r\n                                <center>\r\n                                <Button variant=\"outline-success\">用戶</Button>\r\n                                </center>\r\n                              </a>\r\n                            </td>\r\n                        <td>\r\n                          <a>\r\n                          <CopyToClipboard text={\"https://ipfs.infura.io/ipfs/\" + file.fileHash}\r\n                            onCopy={() => this.setState({copied: true})}>\r\n                            <center>\r\n                            <Button variant=\"primary\">複製</Button>\r\n                            </center>\r\n                          </CopyToClipboard>\r\n                          </a>\r\n                        </td>\r\n                          </tr>\r\n                        </thead>\r\n                      )\r\n                    })}\r\n                  </table>\r\n                </div>\r\n                <div>\r\n                  <br></br>\r\n                </div>\r\n              </main>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;","export function convertBytes(bytes) {\r\n   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n   if (bytes === 0) return '0 Byte';\r\n   var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n   return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\r\n}"],"sourceRoot":""}